# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/sensor.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='proto/sensor.proto',
  package='sensor',
  syntax='proto3',
  serialized_pb=_b('\n\x12proto/sensor.proto\x12\x06sensor\"\x1c\n\x0bTemperature\x12\r\n\x05value\x18\x01 \x01(\x02\x42\x13Z\x11./rest-api/mymqttb\x06proto3')
)




_TEMPERATURE = _descriptor.Descriptor(
  name='Temperature',
  full_name='sensor.Temperature',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='sensor.Temperature.value', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=30,
  serialized_end=58,
)

DESCRIPTOR.message_types_by_name['Temperature'] = _TEMPERATURE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Temperature = _reflection.GeneratedProtocolMessageType('Temperature', (_message.Message,), dict(
  DESCRIPTOR = _TEMPERATURE,
  __module__ = 'proto.sensor_pb2'
  # @@protoc_insertion_point(class_scope:sensor.Temperature)
  ))
_sym_db.RegisterMessage(Temperature)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('Z\021./rest-api/mymqtt'))
# @@protoc_insertion_point(module_scope)
